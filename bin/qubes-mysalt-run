#!/bin/bash
set -e

pillar_flag="from_mysalt_cli"

dryrun=false
showsls=false
no_pillar_flag=false
force_pillar_flag=false
qubesctl_cli_args=()
qubesctl_kwargs=()

usage() {
  cat <<EOF 2>&1
Usage: $(basename $0) [-ksdfh] [-a OPTION,] [template,]

Arguments:
  template  The name of template which matches a salt module. If not specified will use default ones.

Options:
  -a OPTION Append argument(s) to qubesctl binary. Overrides default '--show-output --all'.
  -k        When this is on, the state files requirements will be applied.
  -s        Run state.show_sls for each state file.
  -d        Dry run. Really execute nothing, print every command it would run.
  -f        Force the use of pillar flag when using custom templates. Overrides -k option. 
  -h        Show this message.

Examples:
  Shows the commands it would run for sys-net and sys-firewall minimal templates.
$ qubesctl -a --max-concurrency=2 -a --targets=fedora-30 -d sys-net sys-firewall
EOF
  exit 128
}

while [[ "$1" == -* ]]; do
  case "$1" in
    -k)
        no_pillar_flag=true
        ;;
    -d)
      	dryrun=true
      	;;
    -s)
        showsls=true
        ;;
    -a)
        qubesctl_cli_args+=( "$2" )
        shift
        ;;
     -f)
	force_pillar_flag=true
	;;
    -h)
      	usage
      	;;
    *)
      	echo "ERROR: Unknow option $1"
      	usage
        ;;
  esac
  shift
done


info() {
  echo "$(date) - INFO $@"
}

runit() {
  info "$@"
  if ! $dryrun; then
    $@
  fi
}

call_qubesctl() {
  runit qubesctl "${qubesctl_cli_args[@]}" "$@" "${qubesctl_kwargs[@]}"
}

configure_and_install() {
  local name="$1"
  local module="$(get_module $name)"

  if $showsls; then
    # would create vms
    call_qubesctl state.show_sls "$module.create"

    # would configure created vms
    call_qubesctl state.show_sls "$module.configure"
  else
    runit qubesctl top.enable "$module"

    call_qubesctl state.highstate

    # disable configuration top file
    runit qubesctl top.disable "$module"
  fi
}

get_module() {
  echo minimal.$1
}

disable_remaining_tops() {
  set +e

  # get all enabled top files
  local tops="$(runit qubesctl top.enabled)"

  for state in ${states[@]}; do
    # try to match an enabled module with an existing state
    local module="$(get_module $state)"
    echo "$tops" | grep "$module" >/dev/null

    [ "$?" -eq 0 ] && runit qubesctl top.disable "$module"
  done
}

###############################################################################
# BE CAREFULL! THE ORDER IS IMPORTANT, DO NOT CHANGE
###############################################################################

default_states=()
default_states+=( 'base-templates' )
default_states+=( 'networked' )
default_states+=( 'sys-firewall' )
default_states+=( 'sys-i2p' )
default_states+=( 'sys-usb' )
default_states+=( 'web' )
default_states+=( 'disconnected' )
default_states+=( 'sys-net' )

###############################################################################

echo "WARNING: This script is still in development, and so it is not ready to use."
echo "WARNING: It is advised that one has read the documentation carefully."
echo -n "WARNING: If you REALLY want to continue, type YES (upper case): "
read -r user_consent
case "$user_consent" in
  YES) ;;
  *) exit 2
esac

# by default try to obtain user states
states=$@
traps=( disable_remaining_tops )

if [ -z "$states" ]; then
  # set defaults when user states is empty
  states=${default_states[@]}
elif ! $force_pillar_flag; then
  # disable pillar flag when user inserted custom state sequence
  # because we can not ensure one know exactly right states sequence
  # and also because one may want to create just a few VMs
  no_pillar_flag=true
fi
  
# here where we insert the pillar flag with a value of true
if ! $no_pillar_flag; then
  qubesctl_kwargs+=( "pillar={\"$pillar_flag\":1}" )
fi

# replace with default arguments when empty
if [ -z "$qubesctl_cli_args" ]; then
  qubesctl_cli_args=( '--show-output' '--all' )
fi

# join all defined traps by a colon
trap_cmd=$(IFS=';' ; echo "${traps[*]}") 
info "Trap command: $trap_cmd"
trap "$trap_cmd" 0

for state in ${states[@]}; do
  info "Starting $state..."
  configure_and_install "$state"
done
